#!/usr/bin/env bash
set -eu
[ "${BASH_VERSINFO[0]}" -ge 3 ] && set -o pipefail

get_platform () {
    local platform="$(uname | tr '[:upper:]' '[:lower:]')"

    case "$platform" in
        linux|freebsd)
            echo "Platform '${platform}' supported!" >&2
            # no need to change the platform variable
            ;;
        darwin)
            echo "Platform '${platform}' supported!" >&2
            # update platform to fit what is expected in url
            local platform="macos"
            ;;
        *)
            echo "Platform '${platform}' not supported!" >&2
            exit 1
            ;;
    esac

    echo -n $platform
}

get_arch () {
    local arch=""

    case "$(uname -m)" in
        x86_64|amd64) arch="x64"; ;;
        i686|i386) arch="ia32"; ;;
        *)
            echo "Arch '$(uname -m)' not supported!" >&2
            exit 1
            ;;
    esac

    echo -n $arch
}

my_mktemp () {
    local tempdir=$(mktemp -d /tmp/asdf-typescript.XXXX)
    echo -n $tempdir
}

install_typescript () {
    set -e
    local install_type=$1
    local version=$2
    local install_path=$3
    local platform=$(get_platform)
    local arch=$(get_arch)
    local tempdir=$(my_mktemp $platform)
    local allow_extras=0
    local major_version=$(echo $version | cut -d "." -f1)

    if [ $major_version -lt "2" ]; then
        allow_extras=1
    fi

    echo "Install Type = $install_type"
    echo "Version = $version"
    echo "Install Path = $install_path"
    echo "Platform = $platform"
    echo "Arch = $arch"
    echo "Temp Dir = $tempdir"
    echo "Allow Extras = $allow_extras"
    echo "Major Version = $major_version"

    mkdir -p "$install_path"


    # install the sdk
    URL="https://storage.googleapis.com/typescript-archive/channels/stable/release/${version}/sdk/typescriptsdk-${platform}-${arch}-release.zip"
    echo "Installing typescript SDK..."
    echo $URL
    curl $URL -o "${tempdir}/sdk.zip"

    if [ $allow_extras -eq "1" ]; then
        # install content_shell
        URL="https://storage.googleapis.com/typescript-archive/channels/stable/release/${version}/typescriptium/content_shell-${platform}-${arch}-release.zip"
        echo "Installing Content Shell..."
        echo $URL
        curl $URL -o "${tempdir}/content_shell.zip"

        # install typescriptium
        URL="https://storage.googleapis.com/typescript-archive/channels/stable/release/${version}/typescriptium/typescriptium-${platform}-${arch}-release.zip"
        echo "Installing typescriptium..."
        echo $URL
        curl $URL -o "${tempdir}/typescriptium.zip"
    fi

    echo "Unzipping typescript SDK to $install_path..."
    unzip -d "$install_path" "$tempdir/sdk.zip" > /dev/null
    if [ $allow_extras -eq "1" ]; then
        echo "Unzipping Content Shell to $install_path..."
        unzip -d "$install_path" "$tempdir/content_shell.zip" > /dev/null 2>&1
        echo "Unzipping typescriptium to $install_path..."
        unzip -d "$install_path" "$tempdir/typescriptium.zip" > /dev/null 2>&1
        local typescriptium_dir=$(ls $install_path | grep "typescriptium-")
        local content_shell_dir=$(ls $install_path | grep "drt-")
        if [ "$platform" = "macos" ]; then
            echo "open $install_path/$typescriptium_dir/Chromium.app" >> $install_path/$typescriptium_dir/typescriptium
            chmod +x $install_path/$typescriptium_dir/typescriptium
            ln -s $install_path/$content_shell_dir/Content\ Shell.app/Contents/MacOS/Content\ Shell $install_path/$content_shell_dir/content_shell
        else
            ln -s $install_path/$typescriptium_dir/chrome $install_path/$typescriptium_dir/typescriptium
            # content_shell should already be available without making an explicit link
        fi
    fi
    echo "Removing temporary Files"
    rm -rf "${tempdir}"
}

install_typescript $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
